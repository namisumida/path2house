members <- read.csv(file.choose())
paths <- read.csv(file.choose())
paths <- paths[-c(435,436),] # delete the last two rows - summary rows
paths$new <- ifelse(paths$party=="", 0, 1)
merged <- merge(paths, members[c("full_name", "gender", "state", "party")], by=c("full_name", "state"), all.x=TRUE) # MERGE
merged$party.x <- as.character(merged$party.x)
merged$party.y <- as.character(merged$party.y)
merged$party <- ifelse(merged$party.x=="", merged$party.y, merged$party.x)
merged <- subset(merged,select = -c(party.x, party.y, first_name, last_name))
for (i in 4:27) {
merged[,i] <- ifelse(merged[,i]=="1", 1, 0)
}
View(merged)
merged$college_none <- ifelse(merged$edu_college=="none", 1, 0)
merged$college_public <- ifelse(merged$edu_college=="public", 1, 0)
merged$college_private <- ifelse(merged$edu_college=="private", 1, 0)
merged$college_elite <- ifelse(merged$edu_college=="elite", 1, 0)
table(merged$edu_college, merged$college_none)
table(merged$edu_college, merged$college_elite)
table(merged$edu_college, merged$college_private)
table(merged$edu_college, merged$college_public)
merged <- subset(merged,select = -c(party.x, party.y, first_name, last_name, edu_college))
merged <- merge(paths, members[c("full_name", "gender", "state", "party")], by=c("full_name", "state"), all.x=TRUE) # MERGE
merged$party.x <- as.character(merged$party.x)
merged$party.y <- as.character(merged$party.y)
merged$party <- ifelse(merged$party.x=="", merged$party.y, merged$party.x)
merged$college_none <- ifelse(merged$edu_college=="none", 1, 0)
merged$college_public <- ifelse(merged$edu_college=="public", 1, 0)
merged$college_private <- ifelse(merged$edu_college=="private", 1, 0)
merged$college_elite <- ifelse(merged$edu_college=="elite", 1, 0)
merged <- subset(merged,select = -c(party.x, party.y, first_name, last_name, edu_college))
for (i in 4:27) {
merged[,i] <- ifelse(merged[,i]=="1", 1, 0)
}
summary(merged)
write.csv(merged, '../personal projects/path2house/Data/merged.csv', row.names = FALSE)
write.csv(merged, 'merged.csv', row.names = FALSE)
